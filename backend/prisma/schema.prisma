generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ContactForm {
  id                Int      @id @default(autoincrement())
  firstName         String   @db.VarChar(50)
  lastName          String   @db.VarChar(50)
  email             String   @db.VarChar(254)
  content           String   @db.VarChar(255)
  createdAt         DateTime @default(now())
  brevoSuccess      DateTime?
}

model NewsletterSubscription {
  id                Int      @id @default(autoincrement())
  firstName         String   @db.VarChar(50)
  lastName          String   @db.VarChar(50)
  email             String   @db.VarChar(254)
  createdAt         DateTime @default(now())
  deletedAt         DateTime?
}

model NewsletterPreOptIn {
  id                Int      @id @default(autoincrement())
  firstName         String   @db.VarChar(50)
  lastName          String   @db.VarChar(50)
  email             String   @db.VarChar(254)
  code              String   @db.VarChar(16) @unique
  validTill         DateTime?
  createdAt         DateTime @default(now())
  deletedAt         DateTime?
  brevoSuccessMail  DateTime?
  brevoSuccessList  DateTime?
}

enum EventType {
  CONTACTFORM_SEND
  NEWSLETTER_CONFIRM
  NEWSLETTER_SUBSCRIBE
  CREATE_USER
  CREATE_MY_TABLE
  UPDATE_MY_TABLE
  UPDATE_TABLE
  CREATE_TABLE
}

model Event {
  id                Int       @id @default(autoincrement())
  type              EventType
  involvedEmail     String?   @db.VarChar(254)
  involvedUserId    Int?
  createdAt         DateTime  @default(now())
}

model User {
  id                Int      @id @default(autoincrement())
  pk                Int?     @unique
  referenceId       String   @db.VarChar(140) @unique
  username          String   @db.VarChar(100) @unique
  name              String   @db.VarChar(254)
  introduction      String?  @db.VarChar(25)
  availability      String?  @db.VarChar(20)
  createdAt         DateTime @default(now())
  meeting           Meeting? @relation(fields: [meetingId], references: [id])
  meetingId         Int?     @unique
  meetings          UsersInMeetings[]
  userDetail        UserDetail[]
  socialMedia       SocialMedia[]
  outgoingCalls     MallTalkHistory[] @relation("outgoingCall")
  incomingCalls     MallTalkHistory[] @relation("incomingCall")
}

model Meeting {
  id                Int      @id @default(autoincrement())
  name              String   @db.VarChar(254)
  meetingID         String   @db.VarChar(36) @unique
  attendeePW        String?  @db.VarChar(64)
  moderatorPW       String?  @db.VarChar(64)
  createdAt         DateTime @default(now())
  voiceBridge       Int?
  dialNumber        String?  @db.VarChar(64)
  createTime        BigInt?
  createDate        DateTime?
  user              User?
  public            Boolean  @default(true)
  users             UsersInMeetings[]
}

model UsersInMeetings {
  meeting           Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId         Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  assignedAt        DateTime @default(now())
  role              String   @db.VarChar(12) @default("MODERATOR")

  @@id([meetingId, userId])
}

model UserDetail {
  id                Int      @id @default(autoincrement())
  category          String   @db.VarChar(12)
  text              String   @db.VarChar(60)
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
}

model SocialMedia {
  id                Int      @id @default(autoincrement())
  type              String   @db.VarChar(16)
  link              String   @db.VarChar(60)
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
}

model MallTalkHistory {
  from              User @relation("outgoingCall", fields: [fromId], references: [id], onDelete: Cascade)
  fromId            Int
  to                User @relation("incomingCall", fields: [toId], references: [id], onDelete: Cascade)
  toId              Int
  createdtA         DateTime @default(now())
  status            String  @db.VarChar(12)  @default("UNKNOWN")

  @@id([fromId, toId])
}
