import{_ as a,c as t,a as n,o as s}from"./app-BOmc8sb4.js";const r={};function o(l,e){return s(),t("div",null,e[0]||(e[0]=[n(`<h1 id="dreammall-backend" tabindex="-1"><a class="header-anchor" href="#dreammall-backend"><span>Dreammall Backend</span></a></h1><p><a href="https://nodejs.org/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/nodejs-&gt;%3D20.5.0-blue" alt="nodejs"></a><a href="https://www.npmjs.com/package/npm" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/npm-latest-blue" alt="npm"></a><a href="https://www.docker.com/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/docker-latest-blue" alt="docker"></a><a href="https://apollographql.com" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fraw.githubusercontent.com%2Fdreammall-earth%2Fdreammall.earth%2Fmaster%2Fbackend%2Fpackage.json&amp;query=dependencies[&quot;%40apollo%2Fserver&quot;]&amp;label=apollo-server&amp;color=green" alt="apollo-server"></a><a href="https://graphql.org/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fraw.githubusercontent.com%2Fdreammall-earth%2Fdreammall.earth%2Fmaster%2Fbackend%2Fpackage.json&amp;query=dependencies.graphql&amp;label=graphql&amp;color=green" alt="graphql"></a><a href="https://typegraphql.com/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fraw.githubusercontent.com%2Fdreammall-earth%2Fdreammall.earth%2Fmaster%2Fbackend%2Fpackage.json&amp;query=dependencies[&quot;type-graphql&quot;]&amp;label=type-graphql&amp;color=green" alt="type-graphql"></a><a href="https://prisma.io/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fraw.githubusercontent.com%2Fdreammall-earth%2Fdreammall.earth%2Fmaster%2Fbackend%2Fpackage.json&amp;query=dependencies.prisma&amp;label=prisma&amp;color=green" alt="prisma"></a><a href="https://eslint.org/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fraw.githubusercontent.com%2Fdreammall-earth%2Fdreammall.earth%2Fmaster%2Fbackend%2Fpackage.json&amp;query=devDependencies.eslint&amp;label=eslint&amp;color=yellow" alt="eslint"></a><a href="https://remark.js.org/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fraw.githubusercontent.com%2Fdreammall-earth%2Fdreammall.earth%2Fmaster%2Fbackend%2Fpackage.json&amp;query=devDependencies[&#39;remark-cli&#39;]&amp;label=remark-cli&amp;color=yellow" alt="remark-cli"></a><a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fraw.githubusercontent.com%2Fdreammall-earth%2Fdreammall.earth%2Fmaster%2Fbackend%2Fpackage.json&amp;query=devDependencies.jest&amp;label=jest&amp;color=yellow" alt="jest"></a></p><p>The Dreammall backend.</p><h2 id="requirements-technology" tabindex="-1"><a class="header-anchor" href="#requirements-technology"><span>Requirements &amp; Technology</span></a></h2><p>To be able to build this project you need <code>nodejs</code>, <code>npm</code> and optional <code>docker</code>.</p><p>The project sets up an apollo server. It uses <code>type-graphql</code>.</p><h2 id="commands" tabindex="-1"><a class="header-anchor" href="#commands"><span>Commands</span></a></h2><p>The following commands are available:</p><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>npm install</code></td><td>Project setup</td></tr><tr><td><code>npm run build</code></td><td>Compiles and minifies for production</td></tr><tr><td><code>npm run start</code></td><td>Runs productions server</td></tr><tr><td><strong>Develop</strong></td><td></td></tr><tr><td><code>npm run dev</code></td><td>Compiles and hot-reloads for development</td></tr><tr><td><strong>Database</strong></td><td></td></tr><tr><td><code>npm run db:migrate</code></td><td>Creates and executes migrations needed</td></tr><tr><td><code>npm run db:reset</code></td><td>Drops Schema, run all migrations and seeds</td></tr><tr><td><code>npm run db:seed</code></td><td>Run the seeds</td></tr><tr><td><strong>Test</strong></td><td></td></tr><tr><td><code>npm run test:lint</code></td><td>Run all linters</td></tr><tr><td><code>npm run test:lint:eslint</code></td><td>Run linter eslint</td></tr><tr><td><code>npm run test:lint:remark</code></td><td>Run linter remark</td></tr><tr><td><code>npm run test:unit</code></td><td>Run all unit tests and generate coverage report</td></tr><tr><td><code>npm test</code></td><td>Run all tests &amp; linters</td></tr><tr><td><strong>Maintenance</strong></td><td></td></tr><tr><td><code>npm run update</code></td><td>Check for updates</td></tr></tbody></table><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>Update</span></a></h3><p>You can get a list of packes to update by running <code>npm run update</code>.</p><p>Appending <code>-u </code> will also update the packages in the <code>package.json</code>. You have to run <code>npm install</code> again after.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> run update -- <span class="token parameter variable">-u</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="endpoints" tabindex="-1"><a class="header-anchor" href="#endpoints"><span>Endpoints</span></a></h2><p>The following endpoints are provided given the right command is executed or all three if <code>docker compose</code> is used:</p><table><thead><tr><th>Endpoint</th><th>Description</th></tr></thead><tbody><tr><td><a href="http://localhost:4000/graphql" target="_blank" rel="noopener noreferrer">http://localhost:4000/graphql</a></td><td>GraphQL API</td></tr><tr><td><a href="http://localhost:4000/playground" target="_blank" rel="noopener noreferrer">http://localhost:4000/playground</a></td><td>GraphQL Playground</td></tr></tbody></table><h2 id="how-to-use-as-part-of-a-project" tabindex="-1"><a class="header-anchor" href="#how-to-use-as-part-of-a-project"><span>How to use as part of a project</span></a></h2><p>If you want to use this as part of a larger project, e.g. in conjunction with a frontend also utilizing a boilerplate you cannot use the template mechanic provided by github for this repository.</p><p>You can use the following commands to include the whole git history of the boilerplate and be able to update according to changes to this repo using another remote.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> remote <span class="token function">add</span> xxx_boilerplate_backend git@github.com:IT4Change/boilerplate-backend.git</span>
<span class="line"><span class="token function">git</span> fetch xxx_boilerplate_backend</span>
<span class="line"><span class="token function">git</span> merge <span class="token parameter variable">-s</span> ours --no-commit --allow-unrelated-histories xxx_boilerplate_backend/master</span>
<span class="line"><span class="token function">git</span> read-tree <span class="token parameter variable">--prefix</span><span class="token operator">=</span>xxx/ <span class="token parameter variable">-u</span> xxx_boilerplate_backend/master</span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Imported boilerplate_backend as a subtree under xxx/.&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To update the subtree you can use</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> subtree pull <span class="token parameter variable">-P</span> xxx/ xxx_boilerplate_backend master</span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Updated boilerplate_backend in subtree under xxx/.&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Where <code>xxx</code> refers to the folder and product part you want to use the boilerplate in. This assumes that you might need several copies of the frontend boilerplate for you product.</p><p>This mechanic was taken from this <a href="https://stackoverflow.com/questions/1683531/how-to-import-existing-git-repository-into-another/8396318#8396318" target="_blank" rel="noopener noreferrer">source</a></p><h2 id="database-setup" tabindex="-1"><a class="header-anchor" href="#database-setup"><span>Database setup</span></a></h2><h3 id="the-project-is-set-up-for-a-mysql-database" tabindex="-1"><a class="header-anchor" href="#the-project-is-set-up-for-a-mysql-database"><span>The project is set up for a <code>mysql</code> database</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker-compose</span> up database</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>in the main folder to run the database inside docker. You need to copy the <code>.env.dist</code> file to <code>.env</code>.</p><p>Run <code>npm run db:migrate</code> to generate the database.</p><p>It might be required to delete the migration folder beforehand.</p><h2 id="license" tabindex="-1"><a class="header-anchor" href="#license"><span>License</span></a></h2><p><a href="./LICENSE">Apache 2.0</a></p>`,32)]))}const i=a(r,[["render",o],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/backend/","title":"Dreammall Backend","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Requirements & Technology","slug":"requirements-technology","link":"#requirements-technology","children":[]},{"level":2,"title":"Commands","slug":"commands","link":"#commands","children":[{"level":3,"title":"Update","slug":"update","link":"#update","children":[]}]},{"level":2,"title":"Endpoints","slug":"endpoints","link":"#endpoints","children":[]},{"level":2,"title":"How to use as part of a project","slug":"how-to-use-as-part-of-a-project","link":"#how-to-use-as-part-of-a-project","children":[]},{"level":2,"title":"Database setup","slug":"database-setup","link":"#database-setup","children":[{"level":3,"title":"The project is set up for a mysql database","slug":"the-project-is-set-up-for-a-mysql-database","link":"#the-project-is-set-up-for-a-mysql-database","children":[]}]},{"level":2,"title":"License","slug":"license","link":"#license","children":[]}],"git":{},"filePathRelative":"backend/README.md"}');export{i as comp,p as data};
